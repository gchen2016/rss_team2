
# Install kinect drivers
sudo apt-get install ros-electric-openni-kinect

# Install turtlebot for pointcloud_to_laserscan
sudo apt-get install ros-electric-turtlebot

# Fake laserscan data
Add the following as kinect_laser.launch to ros package

    <launch>
        <!-- kinect and frame ids -->
        <include file="$(find openni_camera)/launch/openni_node.launch"/>
 
        <!-- openni_manager -->
        <node pkg="nodelet" type="nodelet" name="openni_manager" output="screen" respawn="true" args="manager"/>
 
        <!-- throttling -->
        <node pkg="nodelet" type="nodelet" name="pointcloud_throttle" args="load pointcloud_to_laserscan/CloudThrottle openni_manager">
            <param name="max_rate" value="2"/>
            <remap from="cloud_in" to="/camera/depth/points"/>
            <remap from="cloud_out" to="cloud_throttled"/>
        </node>
 
        <!-- fake laser -->
        <node pkg="nodelet" type="nodelet" name="kinect_laser" args="load pointcloud_to_laserscan/CloudToScan openni_manager">
            <param name="output_frame_id" value="/openni_depth_frame"/>
            <param name="min_height" value="-0.15"/>
            <param name="max_height" value="0.15"/>
            <remap from="cloud" to="cloud_throttled"/>
        </node>
    </launch>

------------------------------------------------------------

# Launch kinect
roslaunch openni_camera openni_node.launch

# Visualize pointcloud in rviz
rosrun rviz rviz

Set fixed frame under .Global Options to /openni_camera
Add a PointCloud2 type and select /camera/rgb/points as its topic

------------------------------------------------------------

# Launch faked laser scan
roslaunch [pkg] kinect_laser.launch

# Visualize scan data    
rosrun rviz rviz

Set fixed frame under .Global Options to /openni_depth_frame
Add LaserScan type and select /scan as its topic


