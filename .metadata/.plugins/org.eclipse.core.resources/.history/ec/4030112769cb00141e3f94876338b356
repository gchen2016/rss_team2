package Grasping;

import java.awt.geom.Point2D;
import java.util.List;

public class InverseKinematics {

	protected static double ARM_LENGTH = 0.245;
	protected static double WRIST_LENGTH = 0.18;
	
	public double getTheta(double zsol)
		{
		double theta = Math.acos(zsol/ARM_LENGTH);		//check that x and y give same solution??
		return theta;
		}
	
	public double getPhi(double zsol, double ztarg)
		{
		double phi = Math.acos((zsol-ztarg)/WRIST_LENGTH);
		return phi;
		}
	
	/**
	 * 
	 * @param X negative wrt arm joint
	 * @param Z negative wrt arm joint
	 * @return solutions (2)
	 */
	
	public double[] getPositions(double xtarg, double ztarg)
		{
		double[] Zs = new double[2];
		
		double A = (Math.pow(WRIST_LENGTH,2) - Math.pow(ARM_LENGTH,2)
					-Math.pow(xtarg,2) -Math.pow(ztarg,2))/(2*xtarg); 
		double rat = xtarg/ztarg;
		
		double plain = -A*rat/2;
		double plusmin = Math.sqrt(Math.pow(A*rat,2)/4 - Math.pow(A,2)/2);
		
		Zs[0] = plain+plusmin;
		Zs[1] = plain-plusmin;
		
		return Zs;
		}
	
	public double[] getThetaPhi(double xtarg, double ztarg, double currTheta, double currPhi)
		{
		double[] Zs = getPositions(xtarg, ztarg);
		for (double z : Zs)
			{
			
			}
		
		}
	
	public static void main(String[] args)
		{
		System.out.println(getThetaPhi(ARM_LENGTH + WRIST_LENGTH, 0, 0, 0));
		}
}
